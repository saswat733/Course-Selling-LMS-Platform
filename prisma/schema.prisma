generator client {
  provider = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL") // Ensure this is defined in your `.env` file
}

model Course {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String
  title String
  description String?
  imageUrl String?
  price Float?
  isPublished Boolean @default(false)
  categoryId String? @db.ObjectId
  category Category? @relation(fields: [categoryId], references: [id])
  chapters Chapter[]
  Purchases Purchase[]
  attachements Attachement[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  courses Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachement {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  url String
  courseId String @db.ObjectId
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String?
  videoUrl String?
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  muxData MuxData?
  courseId String @db.ObjectId
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]
  createdAt DateTime @default(now())
}

model MuxData {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  playbackId String?
  assetId String?
  chapterId String @unique @db.ObjectId
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProgress {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String
  chapterId String @db.ObjectId
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  isCompleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String
  courseId String @db.ObjectId
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique
  stripeCustomerId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
