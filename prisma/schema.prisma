generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Ensure this is defined in your `.env` file
}

model Course {
        id String @id @default(uuid())
        userId String
        title String
        description String? @db.Text
        imageUrl String? @db.Text
        price Float?
        isPublished Boolean @default(false)
        categoryIds String?
        category Category? @relation(fields: [categoryIds], references: [id])
        chapters Chapter[]
        Purchases Purchase[]
        attachements Attachement[]
        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt

        @@index([categoryIds])
}


model Category{
  id String @id @default(uuid())
  name String @unique
  courses Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachement{
  id String @id @default(uuid())
  name String
  url String @db.Text
  courseId String
  course Course @relation(fields: [courseId],references: [id],onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([courseId])
}


model Chapter{
  id String @id @default(uuid())
  title String
  description String?
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  muxData MuxData?
  courseId String
  course Course @relation(fields: [courseId],references: [id],onDelete: Cascade)
  userProgress UserProgress[]
  createdAt DateTime @default(now())
  @@index([courseId])
}

model MuxData{
  id String @id @default(uuid())
  playbackId String?
  assetId String?
  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId],references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model UserProgress{
  id String @id @default(uuid())
  userId String
  chapterId String
  chapter Chapter @relation(fields: [chapterId],references: [id],onDelete: Cascade)
  isCompleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
  @@unique([userId,chapterId])
}


model Purchase{
  id String @id @default(uuid())
  userId String
  courseId String
  course Course @relation(fields: [courseId],references: [id],onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
  @@unique([userId,courseId])
}

model StripeCustomer{
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}